#!/bin/bash

script_path () {
    local scr_path=""
    local dir_path=""
    local sym_path=""
    # get (in a portable manner) the absolute path of the current script
    scr_path=$(cd -P -- "$(dirname -- "$0")" && pwd -P) && scr_path=$scr_path/$(basename -- "$0")
    # if the path is a symlink resolve it recursively
    while [ -h $scr_path ]; do
        # 1) cd to directory of the symlink
        # 2) cd to the directory of where the symlink points
        # 3) get the pwd
        # 4) append the basename
        dir_path=$(dirname -- "$scr_path")
        sym_path=$(readlink $scr_path)
        scr_path=$(cd $dir_path && cd $(dirname -- "$sym_path") && pwd)/$(basename -- "$sym_path")
    done
    echo $scr_path
}

script_dir=$(dirname -- "$(script_path)")

shuf_cmd=$(which shuf)
if [ -z "$shuf_cmd" ]; then
    shuf_cmd=$(which gshuf)
fi

strgen() {
    local lo=$1
    local hi=$2
    local lo_not_set=""
    local hi_not_set=""
    local lo_default="100"
    local hi_default="255"

    if [ -z "$lo" ]; then
        local lo_not_set="true"
    fi

    if [ -z "$hi" ]; then
        local hi_not_set="true"
    fi

    if [ -n "$lo_not_set" -a -n "$hi_not_set" ]; then
        local lo=$lo_default
        local hi=$hi_default
    fi

    if [ -z "$lo_not_set" -a -n "$hi_not_set" ]; then
        local hi=$lo
    fi

    echo $(head -n 1000 /dev/random | $script_dir/base91 | tr -d "\\n" | cut -c 1-$($shuf_cmd -i $lo-$hi -n 1))
}

if [ -z "$shuf_cmd" ]; then
    echo "could not find shuf or gshuf, exiting..."
    exit 1
else
    strgen $1 $2
fi
